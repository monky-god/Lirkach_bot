from __future__ import annotations
import asyncio
import os
import json
from dataclasses import dataclass
from typing import Dict, Tuple
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart

from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@Lirkach0k"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

def subscription_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ])


USERS_FILE = "users.json"

def load_users() -> set[int]:
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            return set(json.load(f))
    return set()

def save_users(users: set[int]):
    with open(USERS_FILE, "w") as f:
        json.dump(list(users), f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
USERS = load_users()

# --- –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º ---
@dataclass(frozen=True)
class Exercise:
    name: str
    sets: int
    reps: str
    note: str = ""

@dataclass(frozen=True)
class WorkoutDay:
    title: str
    exercises: Tuple[Exercise, ...]

@dataclass(frozen=True)
class Program:
    key: str
    title: str
    description: str
    split: Tuple[WorkoutDay, ...]
    weekly_days: int

FULL_BODY_3 = Program(
    key="full_body_3",
    title="Full Body (3 –¥–Ω—è)",
    description="–¶–µ–ª–∏–∫–æ–º —Ç–µ–ª–æ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é. –§–æ–∫—É—Å –Ω–∞ –±–∞–∑—É + –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã.",
    weekly_days=3,
    split=(
        WorkoutDay(
            title="–î–µ–Ω—å A (–°–∏–ª–∞)",
            exercises=(
                Exercise("–ñ–∏–º –Ω–æ–≥–∞–º–∏", 5, "5"),
                Exercise("–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞", 5, "5"),
                Exercise("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞", 4, "6-8"),
                Exercise("–û—Ç–≤–µ–¥–µ–Ω–∏–µ –≥–∞–Ω—Ç–µ–ª–µ–π", 3, "8-10"),
                Exercise("–ü–æ–¥—ä–µ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å", 3, "12-15"),
            ),
        ),
        WorkoutDay(
            title="–î–µ–Ω—å B (–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è)",
            exercises=(
                Exercise("–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞", 3, "3-5"),
                Exercise("–ñ–∏–º —Å—Ç–æ—è", 4, "6-8"),
                Exercise("–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", 4, "8-10"),
                Exercise("–í—ã–ø–∞–¥—ã", 3, "10-12"),
                Exercise("–ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å", 3, "10-12"),
            ),
        ),
        WorkoutDay(
            title="–î–µ–Ω—å C (–û–±—â–∏–π)",
            exercises=(
                Exercise("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏—Å–µ–¥—ã", 4, "5-6"),
                Exercise("–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π", 4, "8-10"),
                Exercise("–¢—è–≥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞", 4, "8-10"),
                Exercise("–†–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –¥–µ–ª—å—Ç—ã", 3, "12-15"),
                Exercise("–ü–ª–∞–Ω–∫–∞", 3, "40-60 —Å–µ–∫"),
            ),
        ),
    ),
)

PROGRAMS: Dict[str, Program] = {FULL_BODY_3.key: FULL_BODY_3}

def render_day(day: WorkoutDay) -> str:
    lines = [f"üìå <b>{day.title}</b>"]
    for idx, ex in enumerate(day.exercises, start=1):
        note = f" ‚Äî {ex.note}" if ex.note else ""
        lines.append(f"{idx}. {ex.name}: {ex.sets}√ó{ex.reps}{note}")
    return "\n".join(lines)

def render_program(program: Program) -> str:
    header = f"üèãÔ∏è‚Äç‚ôÇÔ∏è <b>{program.title}</b>\n{program.description}\n–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: <b>{program.weekly_days}</b>\n‚Äî ‚Äî ‚Äî"
    days = "\n\n".join(render_day(d) for d in program.split)
    return f"{header}\n\n{days}"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="programs")
    kb.button(text="üìò –ì–∞–π–¥—ã", callback_data="guides_menu")
    kb.button(text="‚ÑπÔ∏è –°–æ–≤–µ—Ç—ã", callback_data="tips")
    kb.adjust(1)
    return kb

def programs_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for p in PROGRAMS.values():
        kb.button(text=p.title, callback_data=f"prog:{p.key}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")
    kb.adjust(1)
    return kb

def program_nav_kb(pkey: str) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÑ –í—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data=f"prog_show:{pkey}")
    prog = PROGRAMS[pkey]
    for i, day in enumerate(prog.split):
        kb.button(text=f"üóìÔ∏è –î–µ–Ω—å {i+1}: {day.title}", callback_data=f"day:{pkey}:{i}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="programs")
    kb.adjust(1)
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def cmd_start(message: Message, bot: Bot):
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in USERS:
        USERS.add(user_id)
        save_users(USERS)
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username or user_id} (–≤—Å–µ–≥–æ {len(USERS)})")
    if await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –≥–∞–π–¥ üëá",
            reply_markup=main_menu_kb().as_markup()
        )
    else:
        await message.answer(
            "‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=subscription_kb()
        )

async def cb_check_sub(call: CallbackQuery, bot: Bot):
    if await check_subscription(bot, call.from_user.id):
        await call.message.edit_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π:",
            reply_markup=main_menu_kb().as_markup()
        )
    else:
        await call.answer("–¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω!", show_alert=True)


from aiogram.filters import Command

async def cmd_stats(message: Message):
    await message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(USERS)}</b>")


async def cb_programs(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=programs_kb().as_markup())
    await call.answer()

async def cb_back_main(call: CallbackQuery):
    await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())
    await call.answer()

async def cb_program_pick(call: CallbackQuery):
    pkey = call.data.split(":", 1)[1]
    prog = PROGRAMS[pkey]
    await call.message.edit_text(
        f"{prog.title}\n{prog.description}\n–î–Ω–µ–π/–Ω–µ–¥: {prog.weekly_days}",
        reply_markup=program_nav_kb(pkey).as_markup(),
    )
    await call.answer()

async def cb_program_show(call: CallbackQuery):
    pkey = call.data.split(":", 1)[1]
    await call.message.edit_text(render_program(PROGRAMS[pkey]), parse_mode="HTML",
                                 reply_markup=program_nav_kb(pkey).as_markup())
    await call.answer()

async def cb_day_show(call: CallbackQuery):
    _, pkey, idx = call.data.split(":", 2)
    prog = PROGRAMS[pkey]
    day = prog.split[int(idx)]
    await call.message.edit_text(render_day(day), parse_mode="HTML",
                                 reply_markup=program_nav_kb(pkey).as_markup())
    await call.answer()

# --- –†–∞–∑–¥–µ–ª "–ì–∞–π–¥—ã" ---
PDF_MASS_PATH = "mass_guild.pdf"
PDF_RECOMP_PATH = "recomp_guide.pdf"
PDF_SPORTPIT_PATH = "sportpit.pdf"
VIDEO_WARMUP_PATH = "Obshesustavnaya_razminka.mp4"

def guides_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –ú–∞—Å—Å–æ–Ω–æ–±–æ—Ä–Ω—ã–π –≥–∞–π–¥", callback_data="guide_mass")],
        [InlineKeyboardButton(text="‚öñÔ∏è –ì–∞–π–¥ –Ω–∞ —Ä–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é", callback_data="guide_recomp")],
        [InlineKeyboardButton(text="üçΩÔ∏è –°–ø–æ—Ä—Ç–ø–∏—Ç", callback_data="guide_sportpit")],
        [InlineKeyboardButton(text="ü´Ä –ì–∞–π–¥ –ø–æ –ñ–ö–¢", callback_data="guide_gastro")],
        [InlineKeyboardButton(text="üé• –†–∞–∑–º–∏–Ω–∫–∞ (–≤–∏–¥–µ–æ)", callback_data="guide_warmup_video")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")]
    ])
    return kb

async def cb_guides_menu(call: CallbackQuery):
    await call.message.edit_text("üìö –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≥–∞–π–¥:", reply_markup=guides_kb())
    await call.answer()

async def cb_guide_mass(call: CallbackQuery):
    if os.path.exists(PDF_MASS_PATH):
        await call.message.answer_document(FSInputFile(PDF_MASS_PATH))
    else:
        await call.message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üò¢")
    await call.answer()

async def cb_guide_recomp(call: CallbackQuery):
    if os.path.exists(PDF_RECOMP_PATH):
        await call.message.answer_document(FSInputFile(PDF_RECOMP_PATH))
    else:
        await call.message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üò¢")
    await call.answer()

async def cb_guide_sportpit(call: CallbackQuery):
    if os.path.exists(PDF_SPORTPIT_PATH):
        await call.message.answer_document(FSInputFile(PDF_SPORTPIT_PATH))
    else:
        await call.message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üò¢")
    await call.answer()

DOCX_GASTRO_PATH = "Gayd_po_ZHKT.docx"

async def cb_guide_gastro(call: CallbackQuery):
    if os.path.exists(DOCX_GASTRO_PATH):
        await call.message.answer_document(FSInputFile(DOCX_GASTRO_PATH))
    else:
        await call.message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüò¢")
    await call.answer()


async def cb_guide_warmup_video(call: CallbackQuery):
    if os.path.exists(VIDEO_WARMUP_PATH):
        await call.message.answer_video(FSInputFile(VIDEO_WARMUP_PATH), caption="üé• –û–±—â–µ—Å—É—Å—Ç–∞–≤–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞")
    else:
        await call.message.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüò¢")
    await call.answer()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
def setup_router(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(cb_check_sub, F.data == "check_sub")
    dp.callback_query.register(cb_programs, F.data == "programs")
    dp.message.register(cmd_stats, Command("stats"))
    dp.callback_query.register(cb_back_main, F.data == "back:main")
    dp.callback_query.register(cb_program_pick, F.data.startswith("prog:"))
    dp.callback_query.register(cb_program_show, F.data.startswith("prog_show:"))
    dp.callback_query.register(cb_day_show, F.data.startswith("day:"))
    dp.callback_query.register(cb_guides_menu, F.data == "guides_menu")
    dp.callback_query.register(cb_guide_mass, F.data == "guide_mass")
    dp.callback_query.register(cb_guide_recomp, F.data == "guide_recomp")
    dp.callback_query.register(cb_guide_sportpit, F.data == "guide_sportpit")
    dp.callback_query.register(cb_guide_gastro, F.data == "guide_gastro")
    dp.callback_query.register(cb_guide_warmup_video, F.data == "guide_warmup_video")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    setup_router(dp)
    print("Bot started...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")