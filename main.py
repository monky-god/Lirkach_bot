from __future__ import annotations
import asyncio
import os
from dataclasses import dataclass
from typing import Dict, Tuple

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@Lirkach0k"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def add_user(user_id: int, username: str | None):
    conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)
    c = conn.cursor()
    c.execute("""
        INSERT INTO users (user_id, username)
        VALUES (%s, %s)
        ON CONFLICT (user_id) DO NOTHING
    """, (user_id, username))
    conn.commit()
    conn.close()

def count_users() -> int:
    conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM users")
    total = c.fetchone()["count"]
    conn.close()
    return total

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def check_subscription(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

def subscription_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/+JEM_LTMYrcZkNGRi")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üí™ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ", callback_data="personal")
    kb.button(text="üìö –ì–∞–π–¥—ã", callback_data="guides_menu")
    kb.button(text="‚ÑπÔ∏è –°–æ–≤–µ—Ç—ã", callback_data="tips")
    kb.adjust(1)
    return kb


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def cmd_start(message: Message, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username
    add_user(user_id, username)

    if await check_subscription(bot, message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –≥–∞–π–¥ üëá", reply_markup=main_menu_kb().as_markup())
    else:
        await message.answer("‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=subscription_kb())

async def cb_check_sub(call: CallbackQuery, bot: Bot):
    if await check_subscription(bot, call.from_user.id):
        await call.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π:", reply_markup=main_menu_kb().as_markup())
    else:
        await call.answer("–¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω!", show_alert=True)

async def cmd_stats(message: Message):
    total = count_users()
    await message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>")


async def cb_back_main(call: CallbackQuery):
    await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())
    await call.answer()


# --- –†–∞–∑–¥–µ–ª "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ" ---
def personal_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")]
    ])
    return kb

async def cb_personal(call: CallbackQuery):
    await call.message.edit_text(
        "üí™ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ\n\n"
        "–•–æ—á–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–∏—Ç–∞–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ?\n"
        "–ü–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É üëá\n\n"
        "üëâ <a href='https://t.me/R1t3ziz'>@R1t3ziz</a>",
        parse_mode="HTML",
        reply_markup=personal_kb()
    )
    await call.answer()


# --- –†–∞–∑–¥–µ–ª "–ì–∞–π–¥—ã" ---
PDF_MASS_PATH = "mass_guild.pdf"
PDF_RECOMP_PATH = "recomp_guide.pdf"
PDF_SPORTPIT_PATH = "sportpit.pdf"
DOCX_GASTRO_PATH = "Gayd_po_ZHKT.docx"
VIDEO_WARMUP_PATH = "Obshesustavnaya_razminka.mp4"

def guides_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –ú–∞—Å—Å–æ–Ω–æ–±–æ—Ä–Ω—ã–π –≥–∞–π–¥", callback_data="guide_mass")],
        [InlineKeyboardButton(text="‚öñÔ∏è –ì–∞–π–¥ –Ω–∞ —Ä–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é", callback_data="guide_recomp")],
        [InlineKeyboardButton(text="üçΩÔ∏è –°–ø–æ—Ä—Ç–ø–∏—Ç", callback_data="guide_sportpit")],
        [InlineKeyboardButton(text="ü´Ä –ì–∞–π–¥ –ø–æ –ñ–ö–¢", callback_data="guide_gastro")],
        [InlineKeyboardButton(text="üé• –†–∞–∑–º–∏–Ω–∫–∞ (–≤–∏–¥–µ–æ)", callback_data="guide_warmup_video")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")]
    ])

async def cb_guides_menu(call: CallbackQuery):
    await call.message.edit_text("üìö –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≥–∞–π–¥:", reply_markup=guides_kb())
    await call.answer()

async def send_file_or_text(call: CallbackQuery, path: str, file_type: str, caption: str = None):
    if os.path.exists(path):
        if file_type == "pdf" or file_type == "docx":
            await call.message.answer_document(FSInputFile(path), caption=caption)
        elif file_type == "video":
            await call.message.answer_video(FSInputFile(path), caption=caption)
    else:
        await call.message.answer("‚ùó –§–∞–π–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üò¢")
    await call.answer()

async def cb_guide_mass(call: CallbackQuery): await send_file_or_text(call, PDF_MASS_PATH, "pdf")
async def cb_guide_recomp(call: CallbackQuery): await send_file_or_text(call, PDF_RECOMP_PATH, "pdf")
async def cb_guide_sportpit(call: CallbackQuery): await send_file_or_text(call, PDF_SPORTPIT_PATH, "pdf")
async def cb_guide_gastro(call: CallbackQuery): await send_file_or_text(call, DOCX_GASTRO_PATH, "docx")
async def cb_guide_warmup_video(call: CallbackQuery): await send_file_or_text(call, VIDEO_WARMUP_PATH, "video")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
def setup_router(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(cb_check_sub, F.data == "check_sub")
    dp.message.register(cmd_stats, Command("stats"))
    dp.callback_query.register(cb_back_main, F.data == "back:main")
    dp.callback_query.register(cb_guides_menu, F.data == "guides_menu")
    dp.callback_query.register(cb_guide_mass, F.data == "guide_mass")
    dp.callback_query.register(cb_guide_recomp, F.data == "guide_recomp")
    dp.callback_query.register(cb_guide_sportpit, F.data == "guide_sportpit")
    dp.callback_query.register(cb_guide_gastro, F.data == "guide_gastro")
    dp.callback_query.register(cb_personal, F.data == "personal")
    dp.callback_query.register(cb_guide_warmup_video, F.data == "guide_warmup_video")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    init_db()
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    setup_router(dp)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

